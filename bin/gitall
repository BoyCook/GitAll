#!/usr/bin/env node

'use strict';

var fs = require('fs');
var GitAll = require('../lib/gitall');
var confFile = process.env['HOME'] + '/.gitall/config.json';
var args = process.argv.splice(2);
var action = args[0];
var actions = ['clone', 'pull', 'status', 'config'];
var config = [];

function exit(msg) {
	console.log(msg);
	console.log('Usage: gitall {action} {username} {dir}');
	process.exit(1);	
}

function isActive(item) {
	if (item.hasOwnProperty('active')) {
		return (item.active === "true" || item.active == true) ? true : false; 
	} else {
		return true;
	}
}

function validateAction(action) {
	for (var i=0,len=actions.length; i<len; i++) {
		if (actions[i] == action) {
			return true;
		}
	}
	exit('You must use a valid action [' + actions.join('|') + ']');
}

if (args.length == 1) {
	if (fs.existsSync(confFile)) {
		config = JSON.parse(fs.readFileSync(confFile, 'utf8'));
	}
} else if (args.length = 2) {
	config.push({
	   "username": args[1],
	   "dir": ".",
	   "protocol": "ssh"
	});
} else if (args.length = 3) {
	config.push({
	   "username": args[1],
	   "dir": args[2],
	   "protocol": "ssh"
	});
} else if (args.length = 4) {	
	config.push({
	   "username": args[1],
	   "dir": args[2],
	   "protocol": args[3]
	});
} else {
	exit('Invalid arguments');
}

function showConfig() {
	if (fs.existsSync(confFile)) {
		console.log('Config at [%s] is %s', confFile, fs.readFileSync(confFile, 'utf8').trim());
	} else {
		console.log('No config file found at [%s]', confFile);
	}		
}

function doAction(action) {
	for (var i=0,len=config.length; i<len; i++) {
		var item = config[i];
		if (isActive(item)) {
			var git = new GitAll(item.username, item.dir, item.protocol);
			var callBack = git[action];
			callBack.call(git);
		} else {
			console.log('Skipping account [%s]', item.username);
		}						
	}		
}

function run(action) {
	if (action === "config") {
		showConfig();
	} else {
		doAction(action);
	}
}

validateAction(action);
run(action);

// switch (action) {
// 	case "clone":
// 		for (var i=0,len=config.length; i<len; i++) {
// 			var item = config[i];
// 			if (isActive(item)) {
// 				new GitAll(item.username, item.dir, item.protocol).clone();
// 			} else {
// 				console.log('Skipping account [%s]', item.username);
// 			}						
// 		}
// 		break;
// 	case "pull":
// 		for (var i=0,len=config.length; i<len; i++) {
// 			var item = config[i];
// 			if (isActive(item)) {
// 				new GitAll(item.username, item.dir, item.protocol).pull();
// 			} else {
// 				console.log('Skipping account [%s]', item.username);
// 			}			
// 		}	
// 		break;	
// 	case "status":
// 		for (var i=0,len=config.length; i<len; i++) {
// 			var item = config[i];
// 			if (isActive(item)) {
// 				new GitAll(item.username, item.dir, item.protocol).status();
// 			} else {
// 				console.log('Skipping account [%s]', item.username);
// 			}
// 		}	
// 		break;			
// 	case "config":
// 		if (fs.existsSync(confFile)) {
// 			console.log('Config at [%s] is %s', confFile, fs.readFileSync(confFile, 'utf8').trim());
// 		} else {
// 			console.log('No config file found at [%s]', confFile);
// 		}
// 		break;
// 	default:
// 		exit('You must use a valid action [clone|pull|status|config]')
// 		break;			
// }
