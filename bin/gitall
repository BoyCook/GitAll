#!/usr/bin/env node

'use strict';

var fs = require('fs');
var GitAll = require('../lib/gitall');
var confFile = process.env['HOME'] + '/.gitall/config.json';
var args = process.argv.splice(2);
var action = args[0];
var config = [];

function exit(msg) {
	console.log(msg);
	console.log('Usage: gitall {action} {username} {dir}');
	process.exit(1);	
}

if (args.length == 1) {
	if (fs.existsSync(confFile)) {
		config = JSON.parse(fs.readFileSync(confFile, 'utf8'));
	}
} else if (args.length = 2) {
	config.push({
	   "username": args[1],
	   "dir": ".",
	   "protocol": "ssh"
	});
} else if (args.length = 3) {
	config.push({
	   "username": args[1],
	   "dir": args[2],
	   "protocol": "ssh"
	});
} else if (args.length = 4) {	
	config.push({
	   "username": args[1],
	   "dir": args[2],
	   "protocol": args[3]
	});
} else {
	exit('Invalid arguments');
}

switch (action) {
	case "clone":
		for (var i=0,len=config.length; i<len; i++) {
			var item = config[i];
			new GitAll(item.username, item.dir, item.protocol).clone();
		}
		break;
	case "pull":
		for (var i=0,len=config.length; i<len; i++) {
			var item = config[i];
			new GitAll(item.username, item.dir, item.protocol).pull();
		}	
		break;	
	case "status":
		for (var i=0,len=config.length; i<len; i++) {
			var item = config[i];
			new GitAll(item.username, item.dir, item.protocol).status();
		}	
		break;			
	case "config":
		if (fs.existsSync(confFile)) {
			console.log('Config at [%s] is %s', confFile, fs.readFileSync(confFile, 'utf8').trim());
		} else {
			console.log('No config file found at [%s]', confFile);
		}
		break;
	default:
		exit('You must use a valid action [clone|pull|status|config]')
		break;			
}

